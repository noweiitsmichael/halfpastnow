<% content_for :code do %>
<html>
<head>
<meta name="viewport" content="initial-scale=1.0, user-scalable=no" />
<title>heatmap.js GMaps Heatmap Layer</title>
		<meta name="viewport" content="width=device-width, initial-scale=1.0">
		<style>
			body, html {
				margin:0;
				padding:0;
				font-family:Arial;
			}
			h1 {
				margin-bottom:10px;
			}
			#main {
				position:relative;
				width:1020px;
				padding:20px;
				margin:auto;
			}
			#heatmapArea {
				position:relative;
				float:left;
				width:800px;
				height:600px;
				border:1px dashed black;
			}
			#configArea {
				position:relative;
				float:left;
				width:200px;
				padding:15px;
				padding-top:0;
				padding-right:0;
			}
			.btn {
				margin-top:25px;
				padding:10px 20px 10px 20px;
				-moz-border-radius:15px;
				-o-border-radius:15px;
				-webkit-border-radius:15px;
				border-radius:15px;
				border:2px solid black;
				cursor:pointer;
				color:white;
				background-color:black;
			}
			#gen:hover{
				background-color:grey;
				color:black;
			}
			textarea{
				width:260px;
				padding:10px;
				height:200px;
			}
			h2{
				margin-top:0;
			}
		</style>
<link rel="shortcut icon" type="image/png" href="http://www.patrick-wied.at/img/favicon.png" />
<!--script type="text/javascript" src="http://maps.google.com/maps/api/js?sensor=false"></script-->

</head>
<body>
<div id="main">
			<h1>GMaps Heatmap Overlay</h1>
			<a href="http://www.patrick-wied.at/static/heatmapjs/" title="heatmap.js">Back to the project page</a><br /><br />
			<div id="heatmapArea">
			
			</div>
			<div id="configArea">
				<h2>Sidenotes</h2>
				This is a demonstration of a canvas heatmap gmaps overlay<br /><br />
				<strong>Note: this is an early release of the heatmap layer. Please feel free to <a href="https://github.com/pa7/heatmap.js" target="_blank">contribute patches</a>. (e.g: correct datapoint pixels after dragrelease (in draw))</strong>
				<div id="tog" class="btn">Toggle HeatmapOverlay</div>
				<div id="gen" class="btn">Add 5 random lat/lng coordinates</div>
			</div>
			
<div style="position:absolute;width:940px;top:750px;text-align:center;"><a href="http://www.patrick-wied.at/static/heatmapjs/">heatmap.js</a> by <a href="http://www.patrick-wied.at" target="_blank">Patrick Wied</a></div>

</div>
<!--script type="text/javascript" src="/src/heatmap.js"></script>
<script type="text/javascript" src="/src/heatmap-gmaps.js"></script-->
<script type="text/javascript">

var map;
var heatmap; 
var khoa;
var zoom;
var locationsData=[];
var locationData={};

(function(w){
    // the heatmapFactory creates heatmap instances
    var heatmapFactory = (function(){

    // store object constructor
    // a heatmap contains a store
    // the store has to know about the heatmap in order to trigger heatmap updates when datapoints get added
    function store(hmap){

        var _ = {
            // data is a two dimensional array
            // a datapoint gets saved as data[point-x-value][point-y-value]
            // the value at [point-x-value][point-y-value] is the occurrence of the datapoint
            data: [],
            // tight coupling of the heatmap object
            heatmap: hmap
        };
        // the max occurrence - the heatmaps radial gradient alpha transition is based on it
        this.max = 1;

        this.get = function(key){
            return _[key];
        };
        this.set = function(key, value){
            _[key] = value;
        };
    }

    store.prototype = {
        // function for adding datapoints to the store
        // datapoints are usually defined by x and y but could also contain a third parameter which represents the occurrence
        addDataPoint: function(x, y){
            if(x < 0 || y < 0)
                return;

            var me = this,
                heatmap = me.get("heatmap"),
                data = me.get("data");

            if(!data[x])
                data[x] = [];

            if(!data[x][y])
                data[x][y] = 0;

            // if count parameter is set increment by count otherwise by 1
            data[x][y]+=(arguments.length<3)?1:arguments[2];

            me.set("data", data);
            // do we have a new maximum?
            if(me.max < data[x][y]){

                me.max = data[x][y];
                // max changed, we need to redraw all existing(lower) datapoints
                heatmap.get("actx").clearRect(0,0,heatmap.get("width"),heatmap.get("height"));
                for(var one in data)
                    for(var two in data[one])
                        heatmap.drawAlpha(one, two, data[one][two]);

                // @TODO
                // implement feature
                // heatmap.drawLegend(); ?
                return;
            }
            heatmap.drawAlpha(x, y, data[x][y]);
        },
        setDataSet: function(obj){
            console.log("Change map "+map.getZoom()); // pass the getZoom()
            zoom= map.getZoom();
            var me = this,
                heatmap = me.get("heatmap"),
                data = [],
                d = obj.data,
                dlen = d.length;
            // clear the heatmap before the data set gets drawn
            heatmap.clear();
            this.max = obj.max;

            while(dlen--){
                var point = d[dlen];
                heatmap.drawAlpha(point.x, point.y, point.count);
                if(!data[point.x])
                    data[point.x] = [];

                if(!data[point.x][point.y])
                    data[point.x][point.y] = 0;

                data[point.x][point.y]=point.count;
            }
            console.log("Size data "+data.length);
            this.set("data", data);
        },
        exportDataSet: function(){
            var me = this,
                data = me.get("data"),
                exportData = [];

            for(var one in data){
                // jump over undefined indexes
                if(one === undefined)
                    continue;
                for(var two in data[one]){
                    if(two === undefined)
                        continue;
                    // if both indexes are defined, push the values into the array
                    exportData.push({x: parseInt(one, 10), y: parseInt(two, 10), count: data[one][two]});
                }
            }

            return { max: me.max, data: exportData };
        },
        generateRandomDataSet: function(points){
            var heatmap = this.get("heatmap"),
            w = heatmap.get("width"),
            h = heatmap.get("height");
            var randomset = {},
            max = Math.floor(Math.random()*1000+1);
            randomset.max = max;
            var data = [];
            while(points--){
                data.push({x: Math.floor(Math.random()*w+1), y: Math.floor(Math.random()*h+1), count: Math.floor(Math.random()*max+1)});
            }
            randomset.data = data;
            this.setDataSet(randomset);
        }
    };


    // heatmap object constructor
    function heatmap(config){
        // private variables

        var _ = {
            radiusIn : 20,
            radiusOut : 40,
            element : {},
            canvas : {},
            acanvas: {},
            ctx : {},
            actx : {},
            visible : true,
            width : 0,
            height : 0,
            max : false,
            gradient : false,
            opacity: 180,
            premultiplyAlpha: false,
            debug: false
        };
        // heatmap store containing the datapoints and information about the maximum
        // accessible via instance.store
        this.store = new store(this);

        this.get = function(key){
            return _[key];
        };
        this.set = function(key, value){
            _[key] = value;
        };
        // configure the heatmap when an instance gets created
        this.configure(config);
        // and initialize it
        this.init();
    }

    // public functions
    heatmap.prototype = {
        configure: function(config){
                var me = this,
                    rout, rin;

                if(config.radius){
                    rout = config.radius;
                    rin = parseInt(rout/2, 10);
                }
                me.set("radiusIn", rin || 15);
                me.set("radiusOut", rout || 40);
                me.set("element", (config.element instanceof Object)?config.element:document.getElementById(config.element));
                me.set("visible", config.visible);
                me.set("max", config.max || false);
                me.set("gradient", config.gradient || { 0.45: "rgb(0,0,255)", 0.55: "rgb(0,255,255)", 0.65: "rgb(0,255,0)", 0.95: "yellow", 1.0: "rgb(255,0,0)"});    // default is the common blue to red gradient
                me.set("opacity", parseInt(255/(100/config.opacity), 10) || 180);
                me.set("width", config.width || 0);
                me.set("height", config.height || 0);
                me.set("debug", config.debug);
        },
        resize: function () {

                var element = this.get("element"),
                    canvas = this.get("canvas"),
                    acanvas = this.get("acanvas");
                canvas.width = acanvas.width = element.style.width.replace(/px/, "") || this.getWidth(element);
                this.set("width", canvas.width);
                this.set("radiusIn",  15*zoom/21);
                this.set("radiusOut", 40*zoom/21);
                canvas.height = acanvas.height = element.style.height.replace(/px/, "") || this.getHeight(element);
                this.set("height", canvas.height);
                var projection = this.get("heatmap");
                console.log("Resize / change config"+" rin "+this.get("radiusIn")+"rout "+this.get("radiusOut")+" zoom ");
        },

        init: function(){
                var me = this,
                    canvas = document.createElement("canvas"),
                    acanvas = document.createElement("canvas"),
                    element = me.get("element");

                me.initColorPalette();

                me.set("canvas", canvas);
                me.set("acanvas", acanvas);
                me.resize();
                canvas.style.position = acanvas.style.position = "absolute";
                canvas.style.top = acanvas.style.top = "0";
                canvas.style.left = acanvas.style.left = "0";
                canvas.style.zIndex = 1000000;

                if(!me.get("visible"))
                    canvas.style.display = "none";

                me.get("element").appendChild(canvas);
                // debugging purposes only
                if(me.get("debug"))
                    document.body.appendChild(acanvas);
                me.set("ctx", canvas.getContext("2d"));
                me.set("actx", acanvas.getContext("2d"));
        },
        initColorPalette: function(){

            var me = this,
                canvas = document.createElement("canvas"),
                gradient = me.get("gradient"),
                ctx, grad, testData;

            canvas.width = "1";
            canvas.height = "256";
            ctx = canvas.getContext("2d");
            grad = ctx.createLinearGradient(0,0,1,256);

            // Test how the browser renders alpha by setting a partially transparent pixel
            // and reading the result.  A good browser will return a value reasonably close
            // to what was set.  Some browsers (e.g. on Android) will return a ridiculously wrong value.
            testData = ctx.getImageData(0,0,1,1);
            testData.data[0] = testData.data[3] = 64; // 25% red & alpha
            testData.data[1] = testData.data[2] = 0; // 0% blue & green
            ctx.putImageData(testData, 0, 0);
            testData = ctx.getImageData(0,0,1,1);
            me.set("premultiplyAlpha", (testData.data[0] < 60 || testData.data[0] > 70));
            
            for(var x in gradient){
                grad.addColorStop(x, gradient[x]);
            }

            ctx.fillStyle = grad;
            ctx.fillRect(0,0,1,256);

            me.set("gradient", ctx.getImageData(0,0,1,256).data);
        },
        getWidth: function(element){
            var width = element.offsetWidth;
            if(element.style.paddingLeft){
                width+=element.style.paddingLeft;
            }
            if(element.style.paddingRight){
                width+=element.style.paddingRight;
            }

            return width;
        },
        getHeight: function(element){
            var height = element.offsetHeight;
            if(element.style.paddingTop){
                height+=element.style.paddingTop;
            }
            if(element.style.paddingBottom){
                height+=element.style.paddingBottom;
            }

            return height;
        },
        colorize: function(x, y){
                // get the private variables
                var me = this,
                    width = me.get("width"),
                    radiusOut = me.get("radiusOut"),
                    height = me.get("height"),
                    actx = me.get("actx"),
                    ctx = me.get("ctx"),
                    x2 = radiusOut * 2,
                    premultiplyAlpha = me.get("premultiplyAlpha"),
                    palette = me.get("gradient"),
                    opacity = me.get("opacity"),
                    image, imageData, length, alpha, offset, finalAlpha;

                if(x+x2>width){
                    x=width-x2;
                }
                if(x<0){
                    x=0;
                }
                if(y<0){
                    y=0;
                }
                if(y+x2>height){
                    y=height-x2;
                }
                // get the image data for the mouse movement area
                image = actx.getImageData(x,y,x2,x2);
                // some performance tweaks
                imageData = image.data;
                length = imageData.length;

                // loop thru the area
                for(var i=3; i < length; i+=4){

                    // [0] -> r, [1] -> g, [2] -> b, [3] -> alpha
                    alpha = imageData[i],
                    offset = alpha*4;

                    if(!offset)
                        continue;

                    // we ve started with i=3
                    // set the new r, g and b values
                    finalAlpha = (alpha < opacity)?alpha:opacity;
                    imageData[i-3]=palette[offset];
                    imageData[i-2]=palette[offset+1];
                    imageData[i-1]=palette[offset+2];
                    
                    if (premultiplyAlpha) {
                    	// To fix browsers that premultiply incorrectly, we'll pass in a value scaled
                    	// appropriately so when the multiplication happens the correct value will result.
                    	imageData[i-3] /= 255/finalAlpha;
                    	imageData[i-2] /= 255/finalAlpha;
                    	imageData[i-1] /= 255/finalAlpha;
                    }
                    
                    // we want the heatmap to have a gradient from transparent to the colors
                    // as long as alpha is lower than the defined opacity (maximum), we'll use the alpha value
                    imageData[i] = finalAlpha;
                }
                // the rgb data manipulation didn't affect the ImageData object(defined on the top)
                // after the manipulation process we have to set the manipulated data to the ImageData object
                image.data = imageData;
                ctx.putImageData(image,x,y);
        },
        drawAlpha: function(x, y, count){
                // storing the variables because they will be often used
                console.log("Zoom is "+zoom);
                var me = this,
                    r1 = me.get("radiusIn"),
                    r2 = me.get("radiusOut"),
                    ctx = me.get("actx"),
                    max = me.get("max"),
                    // create a radial gradient with the defined parameters. we want to draw an alphamap
                    rgr = ctx.createRadialGradient(x,y,r1,x,y,r2),
                    xb = x-r2, yb = y-r2, mul = 2*r2;
                // the center of the radial gradient has .1 alpha value
                rgr.addColorStop(0, 'rgba(0,0,0,'+((count)?(count/me.store.max):'0.1')+')');
                // and it fades out to 0
                rgr.addColorStop(1, 'rgba(0,0,0,0)');
                // drawing the gradient
                ctx.fillStyle = rgr;
                ctx.fillRect(xb,yb,mul,mul);
                // finally colorize the area
                me.colorize(xb,yb);
        },
        toggleDisplay: function(){
                var me = this,
                    visible = me.get("visible"),
                canvas = me.get("canvas");

                if(!visible)
                    canvas.style.display = "block";
                else
                    canvas.style.display = "none";

                me.set("visible", !visible);
        },
        // dataURL export
        getImageData: function(){
                return this.get("canvas").toDataURL();
        },
        clear: function(){
            var me = this,
                w = me.get("width"),
                h = me.get("height");

            me.store.set("data",[]);
            // @TODO: reset stores max to 1
            //me.store.max = 1;
            me.get("ctx").clearRect(0,0,w,h);
            me.get("actx").clearRect(0,0,w,h);
        },
        cleanup: function(){
            var me = this;
            me.get("element").removeChild(me.get("canvas"));
        }
    };

    return {
            create: function(config){
                return new heatmap(config);
            },
            util: {
                mousePosition: function(ev){
                    // this doesn't work right
                    // rather use
                    /*
                        // this = element to observe
                        var x = ev.pageX - this.offsetLeft;
                        var y = ev.pageY - this.offsetTop;

                    */
                    var x, y;

                    if (ev.layerX) { // Firefox
                        x = ev.layerX;
                        y = ev.layerY;
                    } else if (ev.offsetX) { // Opera
                        x = ev.offsetX;
                        y = ev.offsetY;
                    }
                    if(typeof(x)=='undefined')
                        return;

                    return [x,y];
                }
            }
        };
    })();
    w.h337 = w.heatmapFactory = heatmapFactory;
})(window);
function HeatmapOverlay(map, cfg){
    var me = this;
    console.log("in HeatmapOverlay");
    this.heatmap = null;
    this.conf = cfg;
    this.temp = 90;
    this.latlngs = [];
    this.bounds = null;
    console.log(this.temp);
    console.log("in HeatmapOverlay 2");
    this.setMap(map);
  console.log("in HeatmapOverlay");
  // everytime map zoom in/out it will call draw()
  google.maps.event.addListener(map, 'idle', function() { this.draw() });
}

HeatmapOverlay.prototype = new google.maps.OverlayView();

HeatmapOverlay.prototype.onAdd = function(){
	
    var panes = this.getPanes(),
        w = this.getMap().getDiv().clientWidth,
        h = this.getMap().getDiv().clientHeight,	
	el = document.createElement("div");
    
    el.style.position = "absolute";
    el.style.top = 0;
    el.style.left = 0;
    el.style.width = w + "px";
    el.style.height = h + "px";
    el.style.border = 0;
	
    this.conf.element = el;
    panes.overlayLayer.appendChild(el);

    this.heatmap = h337.create(this.conf);
}

HeatmapOverlay.prototype.onRemove = function(){
    // Empty for now.
}

HeatmapOverlay.prototype.draw = function(){
    
     
    var overlayProjection = this.getProjection(),
        currentBounds = this.map.getBounds();
    console.log("draw map / change map");
    if (currentBounds.equals(this.bounds)) {
      return;
    }
    this.bounds = currentBounds;
    
    var ne = overlayProjection.fromLatLngToDivPixel(currentBounds.getNorthEast()),
        sw = overlayProjection.fromLatLngToDivPixel(currentBounds.getSouthWest()),
        topY = ne.y,
        leftX = sw.x,
        h = sw.y - ne.y,
        w = ne.x - sw.x;

    this.conf.element.style.left = leftX + 'px';
    this.conf.element.style.top = topY + 'px';
    this.conf.element.style.width = w + 'px';
    this.conf.element.style.height = h + 'px';
    this.heatmap.store.get("heatmap").resize();
            
    if(this.latlngs.length > 0){
    	this.heatmap.clear();
    	
        var len = this.latlngs.length,
            projection = this.getProjection();
            d = {
	        max: this.heatmap.store.max,
	        data: []
	    };

        while(len--){
            var latlng = this.latlngs[len].latlng;
	    if(!currentBounds.contains(latlng)) { continue; }
	    	
	    // DivPixel is pixel in overlay pixel coordinates... we need
	    // to transform to screen coordinates so it'll match the canvas
	    // which is continually repositioned to follow the screen.
	    var divPixel = projection.fromLatLngToDivPixel(latlng),
	        screenPixel = new google.maps.Point(divPixel.x - leftX, divPixel.y - topY);

	    var roundedPoint = this.pixelTransform(screenPixel);
		
             d.data.push({ 
	        x: roundedPoint.x,
	        y: roundedPoint.y,
	        count: this.latlngs[len].c
	    });
        }
        this.heatmap.store.setDataSet(d);
    }
}

HeatmapOverlay.prototype.pixelTransform = function(p){
    var w = this.heatmap.get("width"),
        h = this.heatmap.get("height");

    while(p.x < 0){
    	p.x+=w;
    }
	
    while(p.x > w){
	p.x-=w;
    }
		
    while(p.y < 0){
	p.y+=h;
    }

    while(p.y > h){
	p.y-=h;
    }

    p.x = (p.x >> 0);
    p.y = (p.y >> 0);
	
    return p;
}

HeatmapOverlay.prototype.setDataSet = function(data){

    var mapdata = {
        max: data.max,
        data: []
    };
    var d = data.data,
        dlen = d.length,
        projection = this.getProjection();

    this.latlngs = [];
   
    while(dlen--){	
    	var latlng = new google.maps.LatLng(d[dlen].lat, d[dlen].lng);
    	this.latlngs.push({latlng: latlng, c: d[dlen].count});
    	var point = this.pixelTransform(projection.fromLatLngToDivPixel(latlng));
    	mapdata.data.push({x: point.x, y: point.y, count: d[dlen].count});
    }
    this.heatmap.clear();
    this.heatmap.store.setDataSet(mapdata);

}

HeatmapOverlay.prototype.addDataPoint = function(lat, lng, count){

    var projection = this.getProjection(),
        latlng = new google.maps.LatLng(lat, lng),
        point = this.pixelTransform(projection.fromLatLngToDivPixel(latlng));
    
    this.heatmap.store.addDataPoint(point.x, point.y, count);
    this.latlngs.push({ latlng: latlng, c: count });
}

HeatmapOverlay.prototype.toggle = function(){
    this.heatmap.toggleDisplay();
}



function initialize(){
    
	console.log("in initialize");
    $.getJSON('http://localhost:3000/events/mapQuery?format=json', function (locations) {
        console.log("Min : "+locations[locations.length-1].min);
        min = locations[locations.length-1].min;
        for (i=0;i<locations.length;i++)
        {
            locationData = {lat: locations[i].latitude, lng:locations[i].longitude, count:Math.round((locations[i].score)/min) };
            locationsData.push(locationData);
        }

     });
    console.log(locationData);
	var myLatlng = new google.maps.LatLng(30.25052,-97.74916);
	// sorry - this demo is a beta
	// there is lots of work todo
	// but I don't have enough time for eg redrawing on dragrelease right now
	var myOptions = {
	  zoom: 12,
	  center: myLatlng,
	  mapTypeId: google.maps.MapTypeId.ROADMAP,
	  disableDefaultUI: false,
	  scrollwheel: true,
	  draggable: true,
	  navigationControl: true,
	  mapTypeControl: false,
	  scaleControl: true,
	  disableDoubleClickZoom: false
	};
	map = new google.maps.Map(document.getElementById("heatmapArea"), myOptions);
	
	heatmap = new HeatmapOverlay(map, {"radius":15, "visible":true, "opacity":60});
	
	document.getElementById("gen").onclick = function(){
		var x = 5;
		while(x--){
		
			var lat = Math.random()*180;
			var lng = Math.random()*180;
			var count = Math.floor(Math.random()*180+1);
			
			heatmap.addDataPoint(lat,lng,count);
		
		}
	
	};
	var testData={
            max: 46,
            data: locationsData};
            
	document.getElementById("tog").onclick = function(){
		console.log("tog clicked");
        // testData={
        //     max: 100,
        //     data: [{lat: 33.5363, lng:-117.044, count: 100},{lat: 31.854231, lng:-96.773071, count: 100}]};
    
        heatmap.setDataSet(testData);   
		heatmap.toggle();
	};
	
		
    var testData={
            max: 46,
            data: locationsData};
    heatmap.setDataSet(testData);   
    
	// this is important, because if you set the data set too early, the latlng/pixel projection doesn't work
	google.maps.event.addListener(map, "idle", function(){
        // testData={
        //     max: 46,
        //     data: [{lat: 33.5363, lng:-117.044, count: 10},{lat: 31.854231, lng:-96.773071, count: 10}]};
    var    testData={
            max: 46,
            data: locationsData};
		heatmap.setDataSet(testData);
	});
};

</script>
</body>
</html>
<% end %>