<div class="row">
  <div class="list_details col-sm-6 col-sm-offset-1">
    <div class="profile-user-info profile-user-info-striped">
      <div class="profile-info-row">
        <div class="profile-info-name"> Image </div>
        <% if bookmark_list.picture.present? %>
          <% image = bookmark_list.picture %>
        <% elsif bookmark_list.bookmarks.empty? %>
          <% image = "/assets/profile.png" %>
        <% else %>
          <% bookmark = bookmark_list.bookmarks.first %>
          <% if bookmark.bookmarked_type == "Occurrence" %>
            <% image =  bookmark.bookmarked.event.pictures.first.image_url(:thumb) rescue "/assets/profile.png" %>
          <% elsif bookmark.bookmarked_type == "Venue" %>
            <% image =  bookmark.bookmarked.pictures.first.image_url(:thumb) rescue "/assets/profile.png" %>
          <% elsif bookmark.bookmarked_type == "Act" %>
            <% image =  bookmark.bookmarked.pictures.first.image_url(:thumb) rescue "/assets/profile.png" %>
          <% else %>
            <% image = "/assets/profile.png" %>
          <% end %>
        <% end %>
        <div class="profile-info-value">
          <% if bookmark_list.name == "Attending" || bookmark_list.name == "Bookmarks"%>
            <span><%= image_tag image, :alt => "#{bookmark_list.name} Picture", style: "width: 50%;" %></span>
          <% else %>
            <%= image_tag image, :alt => "#{bookmark_list.name} Picture", style: "display: block;width: 50%;", class: "editable img-responsive editable-click editable-empty", id: 'bookmark_list_picture', "data-id" => bookmark_list.id %>
          <% end %>
        </div>
      </div>
    </div>

    <div class="profile-user-info profile-user-info-striped">
      <div class="profile-info-row">
        <div class="profile-info-name"> Name </div>

        <div class="profile-info-value">
          <% if bookmark_list.name == "Attending" || bookmark_list.name == "Bookmarks"%>
            <span><%= bookmark_list.name %></span>
          <% else %>
            <%= link_to bookmark_list.name,'#', id: "name", "data-pk" => bookmark_list.id %>
          <% end %>
        </div>
      </div>
    </div>

    <div class="profile-user-info profile-user-info-striped">
      <div class="profile-info-row">
        <div class="profile-info-name"> Description </div>

        <div class="profile-info-value">
          <% if bookmark_list.name == "Attending" || bookmark_list.name == "Bookmarks"%>
            <span><%= bookmark_list.description %></span>
          <% else %>
            <%= link_to bookmark_list.description,'#', id: "description", "data-pk" => bookmark_list.id %>
          <% end %>
        </div>
      </div>
    </div>
  </div>
</div>
<br>
<div class="clearfix"></div>
<div class="row">
  <div class="well well-lg col-sm-4 col-sm-offset-2">
    <% if bookmarks.empty? %>
      <h4 class="purple">There are no Bookmarks in this category.</h4>
    <% else %>
      <%= link_to "View Bookmarks List", "/explorers/austin/#{bookmark_list.slug}", class: 'btn btn-lg btn-purple', target: :_blank %>
    <% end %>
  </div>
</div>

<script>
  //editables
  $('#name, #description').editable({
    type: 'text',
    url: '/dashboard/update_bookmark_list'
  });

  var last_gritter
  $('#bookmark_list_picture').editable({
    type: 'image',
    name: 'bookmark_list_picture',
    value: null,
    image: {
      //specify ace file input plugin's options here
      btn_choose: 'Change Avatar',
      droppable: true,
      /**
       //this will override the default before_change that only accepts image files
       before_change: function(files, dropped) {
								return true;
							},
       */

      //and a few extra ones here
      name: 'picture',//put the field name here as well, will be used inside the custom plugin
      max_size: 330000,//~300Kb
      on_error: function (code) {//on_error function will be called when the selected file has a problem
        if (last_gritter) $.gritter.remove(last_gritter);
        if (code == 1) {//file format error
          last_gritter = $.gritter.add({
            title: 'File is not an image!',
            text: 'Please choose a jpg|gif|png image!',
            class_name: 'gritter-error gritter-center'
          });
        } else if (code == 2) {//file size rror
          last_gritter = $.gritter.add({
            title: 'File too big!',
            text: 'Image size should not exceed 300Kb!',
            class_name: 'gritter-error gritter-center'
          });
        }
        else {//other error
        }
      },
      on_success: function () {
        $.gritter.removeAll();
      }
    },
    url: function (params) {
      // ***UPDATE AVATAR HERE*** //
      //You can replace the contents of this function with examples/profile-avatar-update.js for actual upload

      var id = $('#bookmark_list_picture').data('id');
      var submit_url = 'update_bookmark_list_picture?id=' + id;
      var deferred;


      //if value is empty, means no valid files were selected
      //but it may still be submitted by the plugin, because "" (empty string) is different from previous non-empty value whatever it was
      //so we return just here to prevent problems
      var value = $('#bookmark_list_picture').next().find('input[type=hidden]:eq(0)').val();
      if (!value || value.length == 0) {
        deferred = new $.Deferred
        deferred.resolve();
        return deferred.promise();
      }

      var $form = $('#bookmark_list_picture').next().find('.editableform:eq(0)')
      var file_input = $form.find('input[type=file]:eq(0)');

      //user iframe for older browsers that don't support file upload via FormData & Ajax
      if (!("FormData" in window)) {
        deferred = new $.Deferred

        var iframe_id = 'temporary-iframe-' + (new Date()).getTime() + '-' + (parseInt(Math.random() * 1000));
        $form.after('<iframe id="' + iframe_id + '" name="' + iframe_id + '" frameborder="0" width="0" height="0" src="about:blank" style="position:absolute;z-index:-1;"></iframe>');
        $form.append('<input type="hidden" name="temporary-iframe-id" value="' + iframe_id + '" />');
        $form.next().data('deferrer', deferred);//save the deferred object to the iframe
        $form.attr({'method': 'POST', 'enctype': 'multipart/form-data',
          'target': iframe_id, 'action': submit_url});

        $form.get(0).submit();

        //if we don't receive the response after 60 seconds, declare it as failed!
        setTimeout(function () {
          var iframe = document.getElementById(iframe_id);
          if (iframe != null) {
            iframe.src = "about:blank";
            $(iframe).remove();

            deferred.reject({'status': 'fail', 'message': 'Timeout!'});
          }
        }, 60000);
      }
      else {
        var fd = null;
        try {
          fd = new FormData($form.get(0));
        } catch (e) {
          //IE10 throws "SCRIPT5: Access is denied" exception,
          //so we need to add the key/value pairs one by one
          fd = new FormData();
          $.each($form.serializeArray(), function (index, item) {
            fd.append(item.name, item.value);
          });
          //and then add files because files are not included in serializeArray()'s result
          $form.find('input[type=file]').each(function () {
            if (this.files.length > 0) fd.append(this.getAttribute('name'), this.files[0]);
          });
        }

        //if file has been drag&dropped , append it to FormData
        if (file_input.data('ace_input_method') == 'drop') {
          var files = file_input.data('ace_input_files');
          if (files && files.length > 0) {
            fd.append(file_input.attr('name'), files[0]);
          }
        }

        //fd = fd.deep_merge(extra_params);
        deferred = $.ajax({
          url: submit_url,
          type: 'POST',
          processData: false,
          contentType: false,
          dataType: 'json',
          data: fd,
          xhr: function () {
            var req = $.ajaxSettings.xhr();
            /*if (req && req.upload) {
             req.upload.addEventListener('progress', function(e) {
             if(e.lengthComputable) {
             var done = e.loaded || e.position, total = e.total || e.totalSize;
             var percent = parseInt((done/total)*100) + '%';
             //bar.css('width', percent).parent().attr('data-percent', percent);
             }
             }, false);
             }*/
            console.log(req);
            return req;
          },
          beforeSend: function () {
            //bar.css('width', '0%').parent().attr('data-percent', '0%');
          },
          success: function () {
            //bar.css('width', '100%').parent().attr('data-percent', '100%');
          }
        })
      }


      deferred.done(function (res) {
        console.log('done')
        if (res.status == 'OK') $('#bookmark_list_picture').get(0).src = res.url;
        else window.location.reload();//alert(res.message);
      }).fail(function (res) {
           window.location.reload();
          //alert("Failure");
        });


      return deferred.promise();
    },

    success: function (response, newValue) {
    }
  })

</script>